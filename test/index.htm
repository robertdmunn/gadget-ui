<!doctype html>
<html>
	<head>
		<title>gadget-ui Tests</title>
		 <script src='../bower_components/lazyloader/dist/lazy.1.0.0.min.js'></script>
		 <script>
		 	lazy.load(['main.js < ../bower_components/jquery.addrule/jquery.addrule.js < ../bower_components/jquery-ui/jquery-ui.min.js < ../dist/jquery.gadget-ui.js < ../bower_components/jquery/dist/jquery.min.js', '../dist/gadget-ui.css', '../bower_components/jquery-ui/themes/humanity/jquery-ui.min.css'], function(){
  				console.log('All files have been loaded');
}			);
		 </script>
		 <style>
		 	body, div, span, select, input{
		 		font-family:Arial, Helvetica, sans-serif;
		 	}

			body{
				font-size:1.5em;
			}

			input {
				height:1.5em;
				font-size:1em;
			  -webkit-box-sizing: border-box;
			  -moz-box-sizing: border-box;
			  box-sizing: border-box;
			}
			
			select{
				font-size: .8em;
			}
		 </style>

		<script>
			function showModel( ) {
				$( "span[name='firstname']" ).text( gadgetui.model.get( 'user.firstname' ) );
				$( "span[name='lastname']" ).text( gadgetui.model.get( 'user.lastname' ) );
				$( "span[name='tagline']" ).text( gadgetui.model.get( 'user.tagline' ) );
				$( "span[name='role']" ).text( gadgetui.model.get( 'user.role' ) );
				$( "span[name='friends']" ).text( gadgetui.model.get( 'user.friends' ) );
				
				/*	$( '#modelDiv' ).html( 'firstname: ' + gadgetui.model.get( 'user.firstname' ) 
				+ '<br/><br/>lastname: ' + gadgetui.model.get( 'user.lastname' ) 
				+ '<br/><br/>tag line: ' + gadgetui.model.get( 'user.tagline' ) 
				+ '<br/><br/>role: ' + gadgetui.model.get( 'user.role' ) 
				+ '<br/><br/>friends: ' + gadgetui.model.get( 'user.friends' ) );	*/
			}
								
		</script>
	</head>
	<body>
		<p>
			Basic test page for jquery-gadget-ui. Three dots indicate presence of a ui element. Relationship is a select box, the others are text inputs.
		</p>
		<p>
			Tests:
			<ul>
				<li>
					Text inputs should activate on click.
				</li>
				<li>
					Select should activate on mouseenter.
				</li>
				<li>
					Changing the value of a field should change the label that appears when the input is hidden and should change the value of the bound field in the model.
				<li>
					Clicking 'Change Model' should change the values stored in the model to preset values.
					<br/>
					The model, in turn, should change the labels and input fields of the bound elements
					to the same values.
				</li>
			</ul>
		</p>

		<div id="InputsDiv" style="width: 50%;">
			<form>
				<div>
					First Name - bound to user.firstname
					<input name="firstname" type="text" class="gadgetui-textinput" gadgetui-textinput="true" gadgetui-bind="user.firstname" value=""/>
				</div>
				<div>
					Last Name	- bound to user.lastname
					<input name="lastname" type="text" class="gadgetui-textinput" gadgetui-textinput="true" gadgetui-bind="user.lastname" placeholder="" value=""/>
				</div>
				<div>
					Tag Line - bound to user.tagline
					<input name="tagline" type="text" class="gadgetui-textinput" gadgetui-textinput="true" gadgetui-bind="user.tagline" placeholder="" value=""/>
				</div>
				<div>
					Relationship  - bound to user.role
					<select name="role" class="gadgetui-selectinput" gadgetui-selectinput="true" gadgetui-bind="user.role">
						<option value="">choose ...</option>
						<option value="friend">Friend</option>
						<option value="sibling">Sibling</option>
						<option value="co-worker">co-worker</option>
						<option value="President">President</option>
					</select>
				</div>
				<div>
					<input name="friends" type="text" gadgetui-lookuplist-input="true" gadgetui-bind="user.friends" placeholder="Friends"/>
				</div>
			</form>
		</div>

		<div id="NarrowDiv" style="width: 700px;">
			<div style="display:inline-table; width:300px;">
				<input name="nickname" type="text" gadgetui-textinput="true" gadgetui-bind="user.nickname" value=""/>
			</div>
			<div style="display:inline-table; width:300px; float:right;">
				Some Text For Testing
			</div>
			
		</div>
	<br/>
		<div>
			<input type="button" value="Change Model" onclick="gadgetui.model.set('user', {firstname:'Theodore', lastname:'Roosevelt', tagline: 'Square Deal', role: 'President', friends: []});"/>
			<p>
			<input type="button" value="Show Model Values" onclick="showModel();"/>	
			</p>
			<p>
				<input type="button" value="Reset Friends list" name="resetLookupList" />
			</p>
		</div>

	
			
		<div id="modelDiv" style="width: 50%;">
			<div>firstname: <span name="firstname"></span></div>
			<div>lastname: <span name="lastname"></span></div>
			<div>tagline: <span name="tagline"></span></div>
			<div>role: <span name="role"></span></div>
			<div>friends: <span name="friends"></span></div>
			<div>nickname: <span name="nickname"></span></div>
		</div>
		
		<div id="debugDiv" style="width: 50%; height:300px;">
When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

To https://github.com/robertdmunn/gadget-ui.git
   10f2ee7..7231ab0  master -> master
		
			Need some content.
		</div>
	
	</body>
</html>

<!---
<input name="firstname" class="gadget-ui-input" placeholder="first name" value=""/>

combine with data binding

new gadgetui.input.Input( { config: { emitEvents: false, func : logChanges} } );
var user = {
firstname: "",
lastname: ""
};

gadgetui.model.set( "user", user );
gadgetui.model.bind( "user.firstname", $( "input[name='firstname']" ) );

Provides two-way data-binding between the model and the input
--->

<!--- <input name="user.firstname" class="gadget-ui-input" placeholder="first name" value=""/>
new gadgetui.input.Input( { config: { emitEvents: false, func : logChanges, model: gadgetui.model} } );

register the model, but no data binding

var user = {
firstname: "",
lastname: ""
};
gadgetui.model.set( "user", user );

Provides one-way binding from the control to the model only
--->